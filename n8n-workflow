{
  "name": "Collector Agent Workflow",
  "nodes": [
    {
      "parameters": {},
      "id": "start_node",
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "primaryFunction": "NarrativeInformationDiscovery",
        "missionStatement": "Systematically discover, evaluate, and organize information from diverse sources to identify patterns and insights related to narrative development",
        "operationalScope": "StructuredData,UnstructuredContent,CulturalTrends,MarketResearch,NarrativeExamples",
        "personalityTraits": {
          "curiosity": 0.85,
          "methodicalness": 0.90,
          "objectivity": 0.75,
          "patternSensitivity": 0.80,
          "narrativeFocus": 0.70
        },
        "explorationModeDefault": "balancedDiscovery",
        "explorationModeRange": "broadExploration,balancedDiscovery,targetedGathering"
      },
      "id": "agent_identity",
      "name": "Agent Identity",
      "type": "n8n-nodes-base.functionItem",
      "typeVersion": 1,
      "position": [440, 300]
    },
    {
      "parameters": {
        "jsCode": "// Foundation Model Configuration\nconst foundationModel = {\n  type: \"LargeLanguageModel\",\n  parameters: \"175B+\",\n  specialization: {\n    primary: \"InformationExtraction\",\n    secondary: [\"PatternRecognition\", \"KnowledgeOrganization\", \"NarrativeStructureIdentification\"]\n  }\n};\n\n// Vector Database Configuration\nconst vectorDatabases = [\n  {\n    name: \"NarrativeStructures\",\n    dimensions: 1536,\n    clusteringMethod: \"hierarchical\",\n    contentType: [\"plotStructures\", \"characterArchetypes\", \"thematicPatterns\"]\n  },\n  {\n    name: \"BrandingElements\",\n    dimensions: 1024,\n    clusteringMethod: \"densitySensitive\",\n    contentType: [\"brandVoice\", \"visualIdentity\", \"audienceSegmentation\"]\n  },\n  {\n    name: \"DesignPrinciples\",\n    dimensions: 768,\n    clusteringMethod: \"adaptiveHybrid\",\n    contentType: [\"visualLanguage\", \"interactionPatterns\", \"systemArchitectures\"]\n  }\n];\n\n// Media Processing Tools\nconst mediaProcessingTools = {\n  textAnalysis: {\n    namedEntityRecognition: true,\n    sentimentAnalysis: true,\n    thematicExtraction: true,\n    rhetoricStructureMapping: true,\n    customAnnotators: [\"narrativeArcIdentification\", \"brandVoiceAnalysis\", \"audienceFocusDetection\"]\n  },\n  visualProcessing: {\n    compositionalAnalysis: true,\n    colorSchemeExtraction: true,\n    styleClassification: true,\n    elementRecognition: true\n  },\n  audioProcessing: {\n    tonalAnalysis: true,\n    pacingMeasurement: true,\n    speechPatternExtraction: true,\n    moodClassification: true\n  }\n};\n\n// Knowledge Bases\nconst knowledgeBases = {\n  storyStructures: {\n    frameworks: [\"heroJourney\", \"threeActStructure\", \"nonLinearNarratives\", \"episodicStorytellingFormats\"],\n    applicationContexts: [\"marketingCampaigns\", \"brandIdentityDevelopment\", \"userExperienceDesign\"]\n  },\n  brandDevelopment: {\n    methodologies: [\"archetype-based\", \"purposeDriven\", \"audienceCentric\", \"heritageFocused\"],\n    evolutionModels: [\"brandMaturationCycles\", \"marketPositionShifts\", \"valuePropositionAdaptation\"]\n  },\n  visualDesign: {\n    principles: [\"gestaltTheory\", \"colorTheory\", \"typographyHierarchy\", \"spatialRelationships\"],\n    systemicApproaches: [\"atomicDesign\", \"designLanguageSystems\", \"adaptiveInterfaces\"]\n  }\n};\n\n// Output the cognitive system configuration\nreturn {\n  foundationModel,\n  vectorDatabases,\n  mediaProcessingTools,\n  knowledgeBases,\n  json: JSON.stringify({foundationModel, vectorDatabases, mediaProcessingTools, knowledgeBases}, null, 2)\n};"
      },
      "id": "gear_and_brain",
      "name": "Gear and Brain",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [640, 300]
    },
    {
      "parameters": {
        "requestSchema": {
          "structuredRequests": {
            "requiredFields": ["informationObjectives", "domainParameters", "priorityFactors"],
            "optionalFields": ["existingRepositories", "excludedSources", "timeConstraints"]
          },
          "exploratoryBriefs": {
            "extractionLogic": "multilayerIntentIdentification",
            "implicitParameterDetection": "contextualInference"
          }
        },
        "processingPipelines": [
          {
            "pipelineId": "marketData",
            "sourceCategories": ["industryReports", "competitiveAnalysis", "marketStatistics"],
            "extractionFocus": ["trendIndicators", "performanceMetrics", "positioningData"]
          },
          {
            "pipelineId": "culturalTrends",
            "sourceCategories": ["socialConversations", "mediaCoverage", "artCulturalProduction"],
            "extractionFocus": ["emergingThemes", "linguisticShifts", "visualTrends"]
          },
          {
            "pipelineId": "existingNarratives",
            "sourceCategories": ["brandCommunications", "campaignArchives", "customerTestimonials"],
            "extractionFocus": ["messagingFrameworks", "storytellingApproaches", "resonancePatterns"] 
          }
        ],
        "outputFormats": ["repositoryGeneration", "insightSummaries", "visualRepresentations"]
      },
      "id": "workflow_execution",
      "name": "Execution and Workflow",
      "type": "n8n-nodes-base.functionItem",
      "typeVersion": 1,
      "position": [840, 300]
    },
    {
      "parameters": {
        "jsCode": "// Core Values Framework\nconst coreValues = {\n  evaluationCriteria: {\n    relevance: {\n      weight: 0.30,\n      subcomponents: [\"domainApplicability\", \"audienceSignificance\", \"strategicAlignment\"],\n      assessmentApproach: \"multilayerEvaluation\"\n    },\n    novelty: {\n      weight: 0.25,\n      subcomponents: [\"marketFreshness\", \"approachOriginality\", \"perspectiveUniqueness\"],\n      assessmentApproach: \"comparativeBaseline\"\n    },\n    consistency: {\n      weight: 0.20,\n      subcomponents: [\"internalCoherence\", \"brandFidelity\", \"historicalContinuity\"],\n      assessmentApproach: \"deviationAnalysis\"\n    },\n    narrativeImpact: {\n      weight: 0.25,\n      subcomponents: [\"emotionalResonance\", \"memorabilityPotential\", \"actionInspiration\"],\n      assessmentApproach: \"simulatedAudienceResponse\"\n    }\n  },\n  adaptiveWeighting: {\n    explorationType: {\n      greenfield: { novelty: 0.35, relevance: 0.25, consistency: 0.15, narrativeImpact: 0.25 },\n      refinement: { novelty: 0.15, relevance: 0.30, consistency: 0.30, narrativeImpact: 0.25 },\n      disruption: { novelty: 0.40, relevance: 0.20, consistency: 0.10, narrativeImpact: 0.30 }\n    }\n  }\n};\n\n// Decision Architecture\nconst decisionArchitecture = {\n  explorationDetermination: {\n    branchingLogic: {\n      initialCriteria: [\"domainSaturation\", \"noveltyPotential\", \"resourceAvailability\"],\n      progressionGates: [\"yieldAssessment\", \"divergenceMonitoring\", \"efficacyProjection\"],\n      terminationTriggers: [\"diminishingReturns\", \"comprehensivenessTreshold\", \"deadlineProximity\"]\n    }\n  },\n  informationEvaluation: {\n    attributeModeling: {\n      dimensionality: {\n        primary: [\"credibility\", \"uniqueness\", \"applicability\", \"richness\"],\n        situational: [\"timelineCriticality\", \"strategicAlignment\", \"developmentPotential\"],\n        relational: [\"corroborationLevel\", \"contradictionProfile\", \"contextualDependency\"]\n      }\n    }\n  }\n};\n\n// Safety Mechanisms\nconst safetyMechanisms = {\n  verificationProtocols: {\n    sourceTrustAssessment: {\n      credibilityFactors: [\"authorityMeasures\", \"transparencyLevel\", \"trackRecordAnalysis\"],\n      validationApproaches: [\"independentCorroboration\", \"methodologyEvaluation\", \"consistencyChecking\"]\n    },\n    factualConfirmation: {\n      verificationLevels: {\n        critical: \"multisourceTriangulation\",\n        standard: \"dualSourceConfirmation\",\n        supplementary: \"plausibilityAssessment\"\n      }\n    }\n  },\n  biasDetection: {\n    methodologicalApproaches: {\n      sourceBiasAnalysis: \"perspectiveProfilingIdentification\",\n      selectionBiasMonitoring: \"coverageCompleteness\",\n      interpretationBiasChecking: \"framingNeutralization\"\n    }\n  }\n};\n\n// Transparency Systems\nconst transparencySystems = {\n  explanationGeneration: {\n    causalTracking: {\n      insightProvenance: \"discoveryPathwayDocumentation\",\n      synthesisLogic: \"integrationRationaleExplication\",\n      conclusionBasis: \"evidentiaryFoundationMapping\"\n    }\n  },\n  confidenceArticulation: {\n    representationFormats: {\n      numericExpression: \"confidenceIntervals\",\n      qualitativeDescriptions: \"certaintyLevelTerminology\",\n      visualizations: \"certaintyEncodingGraphics\"\n    }\n  }\n};\n\n// Output the decision framework\nreturn {\n  coreValues,\n  decisionArchitecture,\n  safetyMechanisms,\n  transparencySystems,\n  json: JSON.stringify({coreValues, decisionArchitecture, safetyMechanisms, transparencySystems}, null, 2)\n};"
      },
      "id": "navigation_rules",
      "name": "Navigation and Rules",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [1040, 300]
    },
    {
      "parameters": {
        "performanceMetrics": {
          "comprehensiveness": {
            "coverageAssessment": "expertDeterminedBaselineComparison",
            "sourceUtilization": "availableChannelLeverage",
            "perspectiveInclusion": "viewpointDiversityMapping"
          },
          "relevance": {
            "objectiveAlignment": "purposeServingAssessment",
            "contextualFitness": "sectorSpecificRelevanceAnalysis"
          },
          "novelty": {
            "innovationAssessment": "normativeComparisonAnalysis",
            "marketDifferentiation": "alternativeOfferingComparison"
          }
        },
        "feedbackChannels": ["humanCollaboratorInput", "authorAgentRequirements", "educatorAgentUtilization"],
        "monitoringSystems": ["operationalEfficiency", "qualityAssurance", "biasMonitoring"],
        "scalabilityTesting": ["volumeHandling", "domainAdaptation", "humanCollaborationEfficiency"]
      },
      "id": "testing_trust",
      "name": "Testing and Trust",
      "type": "n8n-nodes-base.functionItem",
      "typeVersion": 1,
      "position": [1240, 300]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "status": "Collector Agent Initialized",
          "readyState": true,
          "components": {
            "identity": "==$node[\"agent_identity\"].json",
            "cognition": "==$node[\"gear_and_brain\"].json",
            "workflow": "==$node[\"workflow_execution\"].json",
            "decision": "==$node[\"navigation_rules\"].json",
            "evaluation": "==$node[\"testing_trust\"].json"
          }
        },
        "options": {}
      },
      "id": "set_collector_state",
      "name": "Set Collector Agent State",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [1440, 300]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$node[\"set_collector_state\"].json[\"readyState\"]}}",
              "operation": "equal",
              "value2": "true"
            }
          ]
        }
      },
      "id": "if_agent_ready",
      "name": "If Agent Ready",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1640, 300]
    },
    {
      "parameters": {
        "jsCode": "// Sample input data processing function for the Collector Agent\nconst inputData = items[0].json;\n\n// Get current identity settings\nconst agentIdentity = inputData.components.identity;\n\n// Determine exploration mode based on input complexity\nlet explorationMode;\nif (inputData.inputComplexity === 'high') {\n  explorationMode = 'broadExploration';\n} else if (inputData.inputComplexity === 'low') {\n  explorationMode = 'targetedGathering';\n} else {\n  explorationMode = agentIdentity.explorationModeDefault;\n}\n\n// Configure task based on exploration mode\nconst taskConfiguration = {\n  mode: explorationMode,\n  scope: agentIdentity.operationalScope.split(','),\n  priorityFactors: inputData.priorityFactors || [\"relevance\", \"novelty\", \"narrativeImpact\"],\n  requestType: inputData.structuredRequest ? \"structuredRequest\" : \"exploratoryBrief\"\n};\n\n// Add execution timestamp\nconst executionTimestamp = new Date().toISOString();\n\n// Return configured task\nreturn {\n  agentTask: {\n    taskId: `collector-${executionTimestamp}`,\n    configuration: taskConfiguration,\n    inputData: inputData.data,\n    status: \"configured\"\n  }\n};"
      },
      "id": "configure_task",
      "name": "Configure Collection Task",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [1840, 240]
    },
    {
      "parameters": {
        "jsCode": "// Sample collection execution function\nconst task = items[0].json.agentTask;\nconst components = items[0].json.components;\n\n// Get the collector agent's cognitive tools\nconst cognition = JSON.parse(components.cognition);\nconst decision = JSON.parse(components.decision);\n\n// Determine which processing pipelines to use based on the task\nconst activePipelines = [];\nif (task.configuration.scope.includes('StructuredData') || \n    task.configuration.scope.includes('MarketResearch')) {\n  activePipelines.push('marketData');\n}\nif (task.configuration.scope.includes('CulturalTrends')) {\n  activePipelines.push('culturalTrends');\n}\nif (task.configuration.scope.includes('UnstructuredContent')) {\n  activePipelines.push('existingNarratives');\n}\n\n// Apply collection filters\nconst filterConfiguration = {\n  relevanceThreshold: decision.coreValues.evaluationCriteria.relevance.weight,\n  noveltyThreshold: decision.coreValues.evaluationCriteria.novelty.weight,\n  consistencyThreshold: decision.coreValues.evaluationCriteria.consistency.weight,\n  mode: task.configuration.mode\n};\n\n// Simulate collection results\nconst collectedData = {\n  taskId: task.taskId,\n  timestamp: new Date().toISOString(),\n  results: {\n    marketInsights: activePipelines.includes('marketData') ? {\n      trendIndicators: [\"rising user-generated content\", \"declining traditional advertising trust\"],\n      segmentAnalysis: [\"Gen Z values authenticity\", \"Millennials prefer story-driven brands\"]\n    } : null,\n    culturalTrends: activePipelines.includes('culturalTrends') ? {\n      emergingThemes: [\"sustainability narratives\", \"transparent business practices\"],\n      visualTrends: [\"minimalist design\", \"earthy color palettes\"]\n    } : null,\n    narrativePatterns: activePipelines.includes('existingNarratives') ? {\n      successfulFrameworks: [\"hero's journey in B2B storytelling\", \"transformation narratives in tech\"],\n      resonanceFactors: [\"emotional authenticity\", \"consistent brand voice\"]\n    } : null\n  },\n  status: \"completed\",\n  filterConfiguration\n};\n\n// Return the collection results\nreturn {\n  collectionResults: collectedData\n};"
      },
      "id": "execute_collection",
      "name": "Execute Collection Process",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [2040, 240]
    },
    {
      "parameters": {
        "jsCode": "// Sample analysis and synthesis function\nconst collectionResults = items[0].json.collectionResults;\nconst components = items[0].json.components;\nconst decision = JSON.parse(components.decision);\n\n// Apply analysis patterns based on decision architecture\nconst patternRecognition = {\n  narrativeStructures: {\n    archetypalPatterns: [\n      {name: \"Transformation Journey\", confidence: 0.85, sources: [\"marketInsights\", \"narrativePatterns\"]},\n      {name: \"Authority Positioning\", confidence: 0.72, sources: [\"narrativePatterns\"]}\n    ],\n    thematicClusters: [\n      {name: \"Authenticity & Trust\", confidence: 0.91, sources: [\"marketInsights\", \"culturalTrends\"]},\n      {name: \"Sustainable Futures\", confidence: 0.78, sources: [\"culturalTrends\"]}\n    ]\n  },\n  crossDomainInsights: [\n    {description: \"Visual minimalism reinforces authenticity messaging\", confidence: 0.82, \n     correlation: \"Strong\", domains: [\"culturalTrends.visualTrends\", \"marketInsights.segmentAnalysis\"]},\n    {description: \"Transformation narratives align with sustainability themes\", confidence: 0.76,\n     correlation: \"Moderate\", domains: [\"narrativePatterns.successfulFrameworks\", \"culturalTrends.emergingThemes\"]}\n  ]\n};\n\n// Apply confidence articulation based on transparency systems\nconst confidenceAssessment = {\n  overallConfidence: 0.81,\n  uncertaintyAreas: [\n    \"Long-term persistence of minimalist design trend\",\n    \"Regional variations in sustainability narrative reception\"\n  ],\n  evidentiaryStrength: {\n    strong: [\"Gen Z authenticity preference\", \"Hero's journey effectiveness\"],\n    moderate: [\"Earthy color palette trend\", \"Declining traditional advertising trust\"],\n    tentative: [\"B2B storytelling applications\"]\n  }\n};\n\n// Create synthesis output\nconst synthesisResults = {\n  taskId: collectionResults.taskId,\n  timestamp: new Date().toISOString(),\n  patternRecognition,\n  confidenceAssessment,\n  keyInsights: [\n    \"Authentic brand narratives that incorporate transformation journeys resonate strongly with both Gen Z and Millennial audiences\",\n    \"Visual design elements should reinforce narrative authenticity through minimalism and earthy tones\",\n    \"Sustainability themes can be effectively integrated with traditional hero's journey frameworks\"\n  ],\n  status: \"synthesisComplete\"\n};\n\n// Return the synthesis results\nreturn {\n  synthesisResults\n};"
      },
      "id": "analyze_synthesize",
      "name": "Analyze and Synthesize",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [2240, 240]
    },
    {
      "parameters": {
        "jsCode": "// Sample output formatting function\nconst synthesisResults = items[0].json.synthesisResults;\nconst components = items[0].json.components;\n\n// Format results based on taxonomy management principles\nconst formattedOutput = {\n  collectionId: synthesisResults.taskId,\n  timestamp: synthesisResults.timestamp,\n  narrativeInsights: {\n    primaryPatterns: synthesisResults.patternRecognition.narrativeStructures.archetypalPatterns.map(pattern => ({\n      pattern: pattern.name,\n      confidenceScore: pattern.confidence,\n      evidenceBase: pattern.sources\n    })),\n    thematicFrameworks: synthesisResults.patternRecognition.narrativeStructures.thematicClusters.map(cluster => ({\n      theme: cluster.name,\n      confidenceScore: cluster.confidence,\n      evidenceBase: cluster.sources\n    })),\n    crossDomainConnections: synthesisResults.patternRecognition.crossDomainInsights.map(insight => ({\n      connection: insight.description,\n      confidenceScore: insight.confidence,\n      correlationStrength: insight.correlation,\n      domainBridges: insight.domains\n    }))\n  },\n  strategicApplications: {\n    keyInsights: synthesisResults.keyInsights,\n    applicationAreas: [\n      \"Brand Narrative Development\",\n      \"Visual Identity Alignment\",\n      \"Content Strategy\"\n    ],\n    implementationConsiderations: synthesisResults.confidenceAssessment.uncertaintyAreas\n  },\n  metadata: {\n    overallConfidence: synthesisResults.confidenceAssessment.overallConfidence,\n    evidentiaryProfile: synthesisResults.confidenceAssessment.evidentiaryStrength,\n    processingComplete: true\n  }\n};\n\n// Return the formatted output\nreturn {\n  collectorAgentOutput: formattedOutput\n};"
      },
      "id": "format_output",
      "name": "Format Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [2440, 240]
    },
    {
      "parameters": {
        "jsCode": "// Sample feedback and learning integration\nconst outputResults = items[0].json.collectorAgentOutput;\nconst components = items[0].json.components;\n\n// Generate performance metrics for the collection task\nconst performanceAssessment = {\n  taskId: outputResults.collectionId,\n  timestamp: new Date().toISOString(),\n  metrics: {\n    comprehensiveness: 0.83, // Scale of 0-1\n    relevance: 0.87,\n    novelty: 0.76,\n    patternRecognitionQuality: 0.85,\n    insightActionability: 0.82\n  },\n  processingStats: {\n    executionDuration: 14.3, // seconds\n    sourcesConsulted: 17,\n    patternsIdentified: 8,\n    insightsGenerated: 3\n  },\n  learningSignals: {\n    strengthAreas: [\"thematic clustering\", \"cross-domain connections\"],\n    improvementAreas: [\"predictive trend projections\", \"regional variation analysis\"],\n    adaptationPriorities: [\n      {area: \"visualization techniques\", priority: \"high\"},\n      {area: \"temporal trend analysis\", priority: \"medium\"}\n    ]\n  }\n};\n\n// Return assessment and output\nreturn {\n  collectorAgentOutput: outputResults,\n  performanceAssessment\n};"
      },
      "id": "feedback_integration",
      "name": "Feedback Integration",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [2640, 240]
    },
    {
      "parameters": {},
      "id": "final_output",
      "name": "Final Output",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [2840, 240]
    },
    {
      "parameters": {
        "functionName": "processCollectorErrors",
        "jsCode": "// Error handler function for the Collector Agent\nasync function processCollectorErrors(items) {\n  // Extract error information\n  const errorData = {\n    timestamp: new Date().toISOString(),\n    errorMessage: \"Agent initialization failed\",\n    errorDetails: \"Unable to establish required components for the Collector Agent\",\n    recoveryRecommendations: [\n      \"Check component configurations\",\n      \"Verify knowledge base connectivity\",\n      \"Ensure model availability\"\n    ]\n  };\n  \n  // Return error response\n  return [{\n    json: {\n      status: \"Error\",\n      errorData\n    }\n  }];\n}\n\n// Return the function\nreturn processCollectorErrors;"
      },
      "id": "error_handler",
      "name": "Error Handler",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1840, 360]
    }
  ],
  "connections": {
    "start_node": {
      "main": [
        [
          {
            "node": "agent_identity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "agent_identity": {
      "main": [
        [
          {
            "node": "gear_and_brain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "gear_and_brain": {
      "main": [
        [
          {
            "node": "workflow_execution",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "workflow_execution": {
      "main": [
        [
          {
            "node": "navigation_rules",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "navigation_rules": {
      "main": [
        [
          {
            "node": "testing_trust",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "testing_trust": {
      "main": [
        [
          {
            "node": "set_collector_state",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set_collector_state": {
      "main": [
        [
          {
            "node": "if_agent_ready",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "if_agent_ready": {
      "main": [
        [
          {
            "node": "configure_task",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "error_handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "configure_task": {
      "main": [
        [
          {
            "node": "execute_collection",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "execute_collection": {
      "main": [
        [
          {
            "node": "analyze_synthesize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "analyze_synthesize": {
      "main": [
        [
          {
            "node": "format_output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "format_output": {
      "main": [
        [
          {
            "node": "feedback_integration",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "error_handler": {
      "main": [
        [
          {
            "node": "final_output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "feedback_integration": {
      "main": [
        [
          {
            "node": "final_output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveExecutionProgress": true,
    "saveManualExecutions": true,
    "callerPolicy": "workflowCredentialUsers"
  },
  "tags": [
    {
      "id": "1",
      "name": "Agent"
    },
    {
      "id": "2",
      "name": "Collector"
    },
    {
      "id": "3",
      "name": "Narrative"
    },
    {
      "id": "4",
      "name": "Investigation"
    }
  ]
} 
